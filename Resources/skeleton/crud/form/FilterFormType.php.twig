<?php

namespace {{ bundle }}\Form\Type\{{module|capitalize}}\{{entity|camelize}};

{% block use_statements %}
use Symfony\Component\Form\AbstractType;
use Symfony\Component\Form\FormBuilderInterface;
use Symfony\Component\OptionsResolver\OptionsResolver;
use Lexik\Bundle\FormFilterBundle\Filter\Form\Type as Filters;
use Symfony\Bridge\Doctrine\Form\Type\EntityType;
use Symfony\Component\Validator\Constraints;
use Flexix\GeneratorBundle\Transformer\ArrayToJSONStringTransformer;

{% endblock use_statements %}

{% block class_definition %}
class {{ name }} extends AbstractType
{% endblock class_definition %}
{
{% block class_body %}
    {%- if entity_analyzer.getFilterFields|length > 0 %}
    /**
     * {@inheritdoc}
     */
    public function buildForm(FormBuilderInterface $builder, array $options)
    {
        $builder
            {%- for fieldname,field in entity_analyzer.getFilterFields -%}
     
                {%- if field.type in {0: 'string',1: 'text',2: 'guid',3: 'binary',4: 'blob'} %}
                
                ->add('{{ fieldname }}',Filters\TextFilterType::class, ['label' => '{{translation_prefix}}.{{fieldname|snake|lower}}'])
                
                {%- elseif field.type =='boolean' %}
               
                ->add('{{ fieldname }}',Filters\BooleanFilterType::class, ['label' => '{{translation_prefix}}.{{fieldname|snake|lower}}'])
                {%- elseif field.type in {0: 'smallint',1: 'integer',2: 'bigint',3: 'decimal',4: 'float'} %}
                
                ->add('{{ fieldname }}',Filters\NumberFilterType::class, ['label' => '{{translation_prefix}}.{{fieldname|snake|lower}}'])
                {%- elseif field.type in {0: 'date',1: 'date_immutable'}%}
               
                ->add('{{ fieldname }}',Filters\DateTimeRangeFilterType::class, 
                [
                  'label' => '{{translation_prefix}}.{{fieldname|snake|lower}}',
                  'left_date_options' =>[
                        'label' => '{{module}}.{{alias}}_date_min',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ],
                   'right_date_options' => [
                        'label' => '{{module}}.{{alias}}_date_max',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ]
                ])
                {%- elseif field.type in {0: 'datetime',1: 'datetime_immutable',2: 'datetimetz',3: 'datetimetz_immutable'} %}
                
                ->add('{{ fieldname }}',Filters\DateTimeRangeFilterType::class, 
                [
                  'label' => '{{translation_prefix}}.{{fieldname|snake|lower}}',  
                  'left_datetime_options' =>[
                        'label' => '{{translation_prefix}}.{{fieldname|snake|lower}}_date_time_min',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ],
                   'right_datetime_options' => [
                        'label' => '{{translation_prefix}}.{{fieldname|snake|lower}}_date_time_max',
                        'widget' => 'single_text',
                        'format' => 'dd.MM.yyyy'
                    ]
                ]) 
                
                {%- elseif field.type == 'entity' %}
                
                ->add('{{ fieldname }}',EntityType::class, [
                    'label' => '{{translation_prefix}}.{{fieldname|snake|lower}}', 
                    'class'=>'{{ field.fullNamespace }}',
                    'query_builder' => function($repository) {
                     $qb = $repository->createQueryBuilder('u');
                     $qb->setMaxResults(100);
                     return $qb;},
                     'empty_data' => NULL,
                     'required' => false,
                     'choice_translation_domain' => true
                    ])
                {%- elseif field.type in {0: 'array',1: 'simple_array',2: 'json',3: 'json_array'} %}
                
                /*->add('{{ fieldname }}',Filters\ChoiceFilterType::class)*/
                {%- else  %}
                
                ->add('{{ fieldname }}',null, ['label' => '{{translation_prefix}}.{{fieldname|snake|lower}}'])
                {% endif %}    
            {%- endfor %};
            
            {%- for fieldname,field in entity_analyzer.getInsertFields -%}
                {%- if field.type in ['array','simple_array','json','json_array'] %}
            
            /*$builder->get('{{ fieldname }}')
            ->addModelTransformer(new ArrayToJSONStringTransformer());*/
                {%- endif %}
            {%- endfor %};
            
            
    }
    {% endif %}

    /**
     * {@inheritdoc}
     */
    public function configureOptions(OptionsResolver $resolver)
    {
        $resolver->setDefaults(array(
            'csrf_protection'   => false,
            'validation_groups' => array('filtering')
        ));
    }

    /**
     * {@inheritdoc}
     */
    public function getBlockPrefix()
    {
        return '{{ module }}_{{ alias|snake }}_filter';
    }

{# BC with Symfony 2.7 #}

    /**
     * {@inheritdoc}
     */
    public function getName()
    {
        return $this->getBlockPrefix();
    }


{% endblock class_body %}
}
